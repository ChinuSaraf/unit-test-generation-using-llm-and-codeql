import json

from prompt.prompt import Prompt


class Tests(Prompt):
    path = "../data/tests.json"

    def __init__(self, idx, data, mode_of_exec="4"):
        self.idx = idx
        self.data = data
        self.mode_of_exec = mode_of_exec
        # Load Prompts
        with open(self.path) as file:
            self.prompt = json.loads(file.read())

    def parse_response(self, prompt_idx, response):
        # Idea here is to check the response from GPT and make sure it makes sense, else give additional prompts
        # to get the correct response.

        if len(self.prompt) <= prompt_idx:
            return False
        # Returns True if prompt is parsed else False, give additional prompts if False
        return True

    def store(self, idx, out):
        # Writing to a file based on the language passed in the command line
        with open("output/markdowns/" + str(idx) + ".md", "w") as file:
            file.write("\n\n".join(out))

    def write_unit_test(self, idx, message):
        # Writing the unit test generated by GPT into a new file
        start = "<JunitTest>"
        end = "</JunitTest>"

        try:
            start_idx = message.index(start)
            start_len = len(start)
        except ValueError:
            start_idx = 0
            start_len = 0

        try:
            end_idx = message.index(end)
        except ValueError:
            end_idx = len(message)

        code = message[start_idx + start_len: end_idx]
        code = code.replace("```", "")

        if self.mode_of_exec == '4':
            with open("output/generated-tests/" + str(idx) + ".java", "w") as file:
                file.write(code)
        else:
            if self.mode_of_exec == '0':
                sub_dir = 'wo-metadata'
            elif self.mode_of_exec == '1':
                sub_dir = 'class-metadata'
            elif self.mode_of_exec == '2':
                sub_dir = 'method-params'
            elif self.mode_of_exec == '3':
                sub_dir = 'method-vars'

            with open("output/generated-tests/" + sub_dir + "/" + str(idx) + ".java", "w") as file:
                file.write(code)
